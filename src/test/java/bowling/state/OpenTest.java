package bowling.state;

import static org.assertj.core.api.Assertions.*;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.DisplayNameGeneration;
import org.junit.jupiter.api.DisplayNameGenerator;
import org.junit.jupiter.api.Test;

import bowling.point.Point;
import bowling.score.Score;

@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)
@DisplayName("오픈 테스트")
class OpenTest {

	@Test
	void 오픈_동등성_테스트() {
		assertThat(new Open(1, 1)).isEqualTo(new Open(1, 1));
	}

	@Test
	void 두_번의_투구의_합이_최댓값보다_작지_않으면_예외() {
		assertThatIllegalArgumentException().isThrownBy(
			() -> new Open(1, 9)
		);
	}

	@Test
	void 오픈은_종료상태() {
		Open open = new Open(1, 1);
		assertThat(open.isEnd()).isTrue();
	}

	@Test
	void 오픈_상태에서_투구할_수_없음() {
		Open open = new Open(1, 1);
		assertThatThrownBy(
			() -> open.throwBowl(1)
		).isExactlyInstanceOf(UnsupportedOperationException.class);
	}

	@Test
	void 오픈_상태는_점수_계산_가능() {
		Open open = new Open(1, 1);
		Score first = Score.of(1, 0);
		Score second = Score.of(1, 0);

		assertThat(open.score()).isEqualTo(Score.open(first, second));
	}

	@Test
	void 오픈_상태는_한_번_보너스_점수_제공_가능() {
		Open open = new Open(1, 1);
		Score spare = Score.spare(Point.max().score());

		assertThat(open.bonus(spare)).isEqualTo(Score.of(11, 0));
	}

	@Test
	void 오픈_상태는_두_번_보너스_점수_제공_가능() {
		Open open = new Open(1, 1);
		Score strike = Score.strike(Point.max().score());

		assertThat(open.bonus(strike)).isEqualTo(Score.of(12, 0));
	}
}